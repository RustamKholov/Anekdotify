services:
  postgres:
    image: postgres:17
    restart: always
    environment:
      POSTGRES_DB: anekdotify
      POSTGRES_USER: anekdotify_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U anekdotify_user -d anekdotify"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - anekdotify_network

  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - anekdotify_network

  api:
    build:
      context: .
      dockerfile: Anekdotify.Api/Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=anekdotify;Username=anekdotify_user;Password=${POSTGRES_PASSWORD}
      - ConnectionStrings__redis=redis:6379,password=${REDIS_PASSWORD}
      - JWT__Issuer=http://95.216.155.253:8070
      - JWT__Audience=http://95.216.155.253:8070
      - JWT__SigningKey=${JWT_SIGNING_KEY}
      - JWT__RefreshSigningKey=${JWT_REFRESH_SIGNING_KEY}
      - Frontend__BaseUrl=http://95.216.155.253:8070
      - OAuth__GitHub__ClientId=${GITHUB_CLIENT_ID}
      - OAuth__GitHub__ClientSecret=${GITHUB_CLIENT_SECRET}
      - OAuth__Google__ClientId=${GOOGLE_CLIENT_ID}
      - OAuth__Google__ClientSecret=${GOOGLE_CLIENT_SECRET}
    ports:
      - "5000:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/Logs
      - api_keys:/app/keys
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - anekdotify_network

  frontend:
    build:
      context: .
      dockerfile: Anekdotify.Frontend/Dockerfile
    restart: always
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
      - JokeStoreApiUrl=http://api:8080
    ports:
      - "5001:8080"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - anekdotify_network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "8070:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api
      - frontend
    networks:
      - anekdotify_network

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@anekdotify.at
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - anekdotify_network

volumes:
  postgres_data:
  redis_data:
  api_keys:
  pgadmin_data:

networks:
  anekdotify_network:
    driver: bridge
@using Anekdotify.Models.DTOs.JokeRating
@inject ApiClient ApiClient
@inject IToastService ToastService

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<div class="mb-2">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            @if (!string.IsNullOrEmpty(ReplyToUsername))
            {
                <span class="fw-light small ms-2 text-secondary">
                    <i class="bi bi-arrow-return-right"></i> @($"@{ReplyToUsername}")
                </span>
            }
            <span class="fw-semibold small">@Reply.Username</span>
            <span class="text-muted small ms-2">@GetTimeAgo(Reply.CommentDate)</span>
        </div>
    </div>
    <div class="d-flex align-items-center">
        <p class="small mb-1 mb-0 flex-grow-1">@Reply.CommentText</p>
        <div class="d-flex align-items-center gap-1 ms-2">
            <button class="btn btn-link btn-sm p-0 text-dark" title="Reply" @onclick="() => ReplyTo()">
                <i class="bi bi-reply"></i>
            </button>
            <button class="btn btn-link btn-sm p-0 text-dark text-decoration-none" title="Like" @onclick="() => RateComment(true)">
                <i class="bi @(IsLiked == true ? "bi-hand-thumbs-up-fill" : "bi-hand-thumbs-up")"></i>
                <span class="ms-1">@Reply.TotalLikes</span>
            </button>
            <button class="btn btn-link btn-sm p-0 text-dark text-decoration-none" title="Dislike" @onclick="() => RateComment(false)">
                <i class="bi @(IsLiked == false ? "bi-hand-thumbs-down-fill" : "bi-hand-thumbs-down")"></i>
                <span class="ms-1">@Reply.TotalDislikes</span>
            </button>
        </div>
    </div>
</div>


@code {

    [Parameter] public string ReplyToUsername { get; set; } = default!;
    [Parameter] public CommentDto Reply { get; set; } = default!;
    [Parameter] public EventCallback<(string username, int commentId)> SetReplyTo { get; set; }

    private bool? IsLiked { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        var ratingRes = await ApiClient.GetAsync<RatingDto>($"api/comment/rate/{Reply.CommentId}");
        if (ratingRes.IsSuccess)
        {
            if(ratingRes.Data != null && ratingRes.Data.IsLike.HasValue)
            {
                IsLiked = ratingRes.Data.IsLike;
            }
        }
        else
        {
            ToastService.ShowError("Failed to load comment rating.");
        }
    }
    private void ReplyTo()
    {
        SetReplyTo.InvokeAsync((Reply.Username, Reply.CommentId));
    }
    private async Task RateComment(bool newValue)
    {
       if(IsLiked == newValue)
       {
            var res = await ApiClient.DeleteAsync($"api/comment/rate/{Reply.CommentId}");
            if(res.IsSuccess)
            {
                if (newValue) Reply.TotalLikes--;
                else Reply.TotalDislikes--;

                IsLiked = null;
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError("Failed to remove rating.");
            }
            return;
       }
       
        var updateRes = await ApiClient.PutAsync<RatingDto, bool>($"api/comment/rate/{Reply.CommentId}", newValue);
         if (updateRes.IsSuccess)
         {
                if (newValue)
                {
                    if( IsLiked == false)
                    {
                        Reply.TotalDislikes--;
                        Reply.TotalLikes++;
                    }
                    else if (IsLiked == null)
                    {
                        Reply.TotalLikes++;
                    }
                }
                else
                {
                    if (IsLiked == true)
                    {
                        Reply.TotalLikes--;
                        Reply.TotalDislikes++;
                    }
                    else if (IsLiked == null)
                    {
                        Reply.TotalDislikes++;
                    }
                }
                IsLiked = newValue;
                StateHasChanged();
         }
         else
         {
                ToastService.ShowError("Failed to update rating.");
         }

    }
    
    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalHours < 1) return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalDays < 1) return $"{(int)timeSpan.TotalHours} hours ago";
        return $"{(int)timeSpan.TotalDays} days ago";
    }


}



<div class="mb-3 border-bottom pb-2">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <span class="fw-semibold small">@CommentDto.Username</span>
            <span class="text-muted small ms-2">@GetTimeAgo(CommentDto.CommentDate)</span>
        </div>
    </div>

    <div class="d-flex align-items-center">
        <p class="mb-1 mb-0 flex-grow-1">@CommentDto.CommentText</p>
        <div class="d-flex align-items-center gap-2 ms-3">
            <button class="btn btn-sm btn-secondary" @onclick="ReplyTo">
                <i class="bi bi-reply"></i> Reply
            </button>
            <button class="btn btn-sm btn-outline-success" @onclick="() => RateComment(true)">
                <i class="bi bi-hand-thumbs-up"></i> <span>@CommentDto.TotalLikes</span>
            </button>
            <button class="btn btn-sm btn-outline-danger" @onclick="() => RateComment(false)">
                <i class="bi bi-hand-thumbs-down"></i> <span>@CommentDto.TotalDislikes</span>
            </button>
        </div>
    </div>

    <button class="btn btn-sm btn-link text-secondary px-0 ms-1" style="text-decoration: none;" @onclick="() => Toggle(CommentDto.CommentId)">
        <i class="bi @(ExpandedReplies.Contains(CommentDto.CommentId) ? "bi-chevron-up" : "bi-chevron-down")"></i>
        <span class="small">Replies</span>
    </button>
</div>

@code {

    [Parameter] public CommentDTO CommentDto { get; set; } = default!;
    [Parameter] public EventCallback<(string username, int commentId)> SetReplyTo { get; set; }
    [Parameter] public HashSet<int> ExpandedReplies { get; set; } = new();
    [Parameter] public EventCallback<int> ToggleReplies { get; set; }
 

    private void Toggle(int commentId)
    {
        ToggleReplies.InvokeAsync(commentId);
    }
    private void RateComment(bool newValue)
    {
       
    }

    private async Task ReplyTo()
    {
        await SetReplyTo.InvokeAsync((CommentDto.Username, CommentDto.CommentId));
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalHours < 1) return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalDays < 1) return $"{(int)timeSpan.TotalHours} hours ago";
        return $"{(int)timeSpan.TotalDays} days ago";
    }
}

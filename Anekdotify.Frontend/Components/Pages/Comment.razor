@using Anekdotify.Models.DTOs.JokeRating
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject ApiClient ApiClient
@inject IToastService ToastService

<div class="mb-3 border-bottom pb-2">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <span class="fw-semibold small">@CommentDto.Username</span>
            <span class="text-muted small ms-2">@GetTimeAgo(CommentDto.CommentDate)</span>
        </div>
    </div>

    <div class="d-flex align-items-center">
        <p class="mb-1 mb-0 flex-grow-1">@CommentDto.CommentText</p>
        <div class="d-flex align-items-center gap-1 ms-2">
            <button class="btn btn-link btn-sm p-0 text-dark" title="Reply" @onclick="() => ReplyTo()">
                <i class="bi bi-reply"></i>
            </button>
            <button class="btn btn-link btn-sm p-0 text-success" title="Like" @onclick="() => RateComment(true)">
                <i class="bi bi-hand-thumbs-up"></i>
                <span class="small text-decoration-none">@CommentDto.TotalLikes</span>
            </button>
            <button class="btn btn-link btn-sm p-0 text-danger" title="Dislike" @onclick="() => RateComment(false)">
                <i class="bi bi-hand-thumbs-down"></i>
                <span class="small text-decoration-none">@CommentDto.TotalDislikes</span>
            </button>
        </div>
    </div>

    <button class="btn btn-sm btn-link text-secondary px-0 ms-1" style="text-decoration: none;" @onclick="() => Toggle(CommentDto.CommentId)">
        <i class="bi @(ExpandedReplies.Contains(CommentDto.CommentId) ? "bi-chevron-up" : "bi-chevron-down")"></i>
        <span class="small">Replies</span>
    </button>
</div>

@code {

    [Parameter] public CommentDTO CommentDto { get; set; } = default!;

    [Parameter] public EventCallback<(string username, int commentId)> SetReplyTo { get; set; }

    [Parameter] public HashSet<int> ExpandedReplies { get; set; } = new();

    [Parameter] public EventCallback<int> ToggleReplies { get; set; }
 
    private bool? isLiked { get; set; } = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender) return;

        var ratingRes = await ApiClient.GetAsync<RatingDTO>($"api/comment/rate/{CommentDto.CommentId}");
        if (ratingRes.IsSuccess && ratingRes.Data != null )
        {
            if(ratingRes.Data.IsLike.HasValue)
            {
                isLiked = ratingRes.Data.IsLike;
            }
        }
    }
    private void Toggle(int commentId)
    {
        ToggleReplies.InvokeAsync(commentId);
    }
    private async Task RateComment(bool newValue)
    {
       if(isLiked == newValue)
       {
            var res = await ApiClient.DeleteAsync($"api/comment/rate/{CommentDto.CommentId}");
            if(res.IsSuccess)
            {
                if (newValue) CommentDto.TotalLikes--;
                else CommentDto.TotalDislikes--;

                isLiked = null;
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError("Failed to remove rating.");
            }
            return;
       }
       
        var updateRes = await ApiClient.PutAsync<RatingDTO, bool>($"api/comment/rate/{CommentDto.CommentId}", newValue);
         if (updateRes.IsSuccess)
         {
                if (newValue)
                {
                    if( isLiked == false)
                    {
                        CommentDto.TotalDislikes--;
                        CommentDto.TotalLikes++;
                    }
                    else if (isLiked == null)
                    {
                        CommentDto.TotalLikes++;
                    }
                }
                else
                {
                    if (isLiked == true)
                    {
                        CommentDto.TotalLikes--;
                        CommentDto.TotalDislikes++;
                    }
                    else if (isLiked == null)
                    {
                        CommentDto.TotalDislikes++;
                    }
                }
                isLiked = newValue;
                StateHasChanged();
         }
         else
         {
                ToastService.ShowError("Failed to update rating.");
         }

    }

    private async Task ReplyTo()
    {
        await SetReplyTo.InvokeAsync((CommentDto.Username, CommentDto.CommentId));
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalHours < 1) return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalDays < 1) return $"{(int)timeSpan.TotalHours} hours ago";
        return $"{(int)timeSpan.TotalDays} days ago";
    }
}

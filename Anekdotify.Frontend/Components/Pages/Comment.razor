@using Anekdotify.Models.DTOs.JokeRating
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject ApiClient ApiClient
@inject IToastService ToastService

<div class="mb-3 border-bottom pb-2">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <span class="fw-semibold small">@CommentDto.Username</span>
            <span class="text-muted small ms-2">@GetTimeAgo(CommentDto.CommentDate)</span>
        </div>
        @if (PostedByCurrentUser)
        {
            <button class="btn btn-link btn-sm p-0 text-danger text-decoration-none" title="Delete comment"
                @onclick="DeleteComment" @onclick:stopPropagation="true">
                <i class="bi bi-x-lg"></i>
            </button>
        }

    </div>

    <div class="d-flex align-items-center">
        <p class="mb-1 mb-0 flex-grow-1">@CommentDto.CommentText</p>
        <div class="d-flex align-items-center gap-1 ms-2">
            <button class="btn btn-link btn-sm p-0 text-dark text-decoration-none" title="Reply" @onclick="ReplyTo">
                <i class="bi bi-reply"></i>
            </button>
            <button class="btn btn-link btn-sm p-0 text-dark text-decoration-none" title="Like"
                @onclick="() => RateComment(true)">
                <i class="bi @(IsLiked == true ? "bi-hand-thumbs-up-fill" : "bi-hand-thumbs-up")"></i>
                <span class="ms-1">@CommentDto.TotalLikes</span>
            </button>
            <button class="btn btn-link btn-sm p-0 text-dark text-decoration-none" title="Dislike"
                @onclick="() => RateComment(false)">
                <i class="bi @(IsLiked == false ? "bi-hand-thumbs-down-fill" : "bi-hand-thumbs-down")"></i>
                <span class="ms-1">@CommentDto.TotalDislikes</span>
            </button>
        </div>
    </div>

    <button class="btn btn-sm btn-link text-secondary px-0 ms-1" style="text-decoration: none;"
        @onclick="() => Toggle(CommentDto.CommentId)">
        <i class="bi @(ExpandedReplies.Contains(CommentDto.CommentId) ? "bi-chevron-up" : "bi-chevron-down")"></i>
        <span class="small">Replies</span>
    </button>
</div>

@code {

    [Parameter] public CommentDto CommentDto { get; set; } = null!;

    [Parameter] public EventCallback<(string username, int commentId)> SetReplyTo { get; set; }

    [Parameter] public HashSet<int> ExpandedReplies { get; set; } = new();

    [Parameter] public EventCallback<int> ToggleReplies { get; set; }

    [Parameter] public EventCallback<int> OnCommentDeleted { get; set; }


    private bool? IsLiked { get; set; }
    private bool PostedByCurrentUser { get; set; }


    protected override async Task OnInitializedAsync()
    {

        var ratingRes = await ApiClient.GetAsync<RatingDto>($"api/comment/rate/{CommentDto.CommentId}");
        if (ratingRes is { IsSuccess: true, Data.IsLike: not null })
        {
            IsLiked = ratingRes.Data.IsLike;
        }

        var commentAuthorRes = await ApiClient.GetAsync<bool>($"api/comments/{CommentDto.CommentId}/created-by-me");
        if (commentAuthorRes.IsSuccess)
        {
            PostedByCurrentUser = commentAuthorRes.Data;
        }
    }

    private async Task DeleteComment()
    {
        if (!PostedByCurrentUser) return;

        try
        {
            var result = await ApiClient.DeleteAsync($"api/comments/{CommentDto.CommentId}");
            if (result.IsSuccess)
            {
                ToastService.ShowSuccess("Comment deleted successfully.");
                await OnCommentDeleted.InvokeAsync(CommentDto.CommentId);
            }
            else
            {
                ToastService.ShowError("Failed to delete comment.");
            }
        }
        catch (Exception)
        {
            ToastService.ShowError("An error occurred while deleting the comment.");
        }
    }

    private void Toggle(int commentId)
    {
        ToggleReplies.InvokeAsync(commentId);
    }
    private async Task RateComment(bool newValue)
    {
        if (IsLiked == newValue)
        {
            var res = await ApiClient.DeleteAsync($"api/comment/rate/{CommentDto.CommentId}");
            if (res.IsSuccess)
            {
                if (newValue) CommentDto.TotalLikes--;
                else CommentDto.TotalDislikes--;

                IsLiked = null;
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError("Failed to remove rating.");
            }
            return;
        }

        var updateRes = await ApiClient.PutAsync<RatingDto, bool>($"api/comment/rate/{CommentDto.CommentId}", newValue);
        if (updateRes.IsSuccess)
        {
            if (newValue)
            {
                switch (IsLiked)
                {
                    case false:
                        CommentDto.TotalDislikes--;
                        CommentDto.TotalLikes++;
                        break;
                    case null:
                        CommentDto.TotalLikes++;
                        break;
                }
            }
            else
            {
                switch (IsLiked)
                {
                    case true:
                        CommentDto.TotalLikes--;
                        CommentDto.TotalDislikes++;
                        break;
                    case null:
                        CommentDto.TotalDislikes++;
                        break;
                }
            }
            IsLiked = newValue;
            StateHasChanged();
        }
        else
        {
            ToastService.ShowError("Failed to update rating.");
        }

    }

    private async Task ReplyTo()
    {
        await SetReplyTo.InvokeAsync((CommentDto.Username, CommentDto.CommentId));
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1) return "Just now";
        if (timeSpan.TotalHours < 1) return $"{(int)timeSpan.TotalMinutes} minutes ago";
        return timeSpan.TotalDays < 1 ? $"{(int)timeSpan.TotalHours} hours ago" : $"{(int)timeSpan.TotalDays} days ago";
    }
}

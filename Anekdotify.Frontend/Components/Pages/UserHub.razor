@page "/hub"
@inject NavigationManager NavigationManager
@inject ApiClient ApiClient
@inject IToastService ToastService
@rendermode RenderMode.InteractiveServer

<PageTitle>User Hub - Anekdotify</PageTitle>

<div class="container py-4" style="height: 95%;">
    <div class="row mb-4">
        <div class="col-12 d-flex flex-column flex-md-row justify-content-between align-items-start align-items-md-center">
            <h2 class="text-secondary mb-3 mb-md-0">
                <i class="fas fa-user-cog me-2"></i>
                User Hub
            </h2>
            <nav aria-label="User Hub Navigation" class="w-100 w-md-auto d-flex justify-content-center">
                <div class="btn-group flex-wrap" role="group">
                    <a href="/profile" class="btn btn-outline-secondary mb-2 mb-md-0">
                        <i class="fas fa-user me-2"></i>
                        Profile
                    </a>
                    <a href="/saved" class="btn btn-outline-secondary mb-2 mb-md-0">
                        <i class="fa-solid fa-bookmark"></i>
                        Saved
                    </a>
                    <a href="/suggest" class="btn btn-outline-secondary mb-2 mb-md-0">
                        <i class="fas fa-plus-circle me-2"></i>
                        Submit Joke
                    </a>
                </div>
            </nav>
        </div>
    </div>

    <!-- Quick Stats Cards -->
    <div class="row row-cols-3 g-2 g-md-3 mb-4">
    <div class="col">
        <div class="card border-secondary text-center h-100">
            <div class="card-body">
                <i class="fas fa-laugh-beam text-secondary fs-2 mb-2"></i>
                <h4 class="text-secondary">@(_userJokes?.Count() ?? 0)</h4>
                <p class="text-muted mb-0">Your Jokes</p>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card border-secondary text-center h-100">
            <div class="card-body">
                <i class="fas fa-thumbs-up text-secondary fs-2 mb-2"></i>
                <h4 class="text-secondary">@(_userJokes?.Sum(j => j.LikeCount) ?? 0)</h4>
                <p class="text-muted mb-0">Total Likes</p>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card border-secondary text-center h-100">
            <div class="card-body">
                <i class="fas fa-comments text-secondary fs-2 mb-2"></i>
                <h4 class="text-secondary">@(_userJokes?.Sum(j => j.CommentCount) ?? 0)</h4>
                <p class="text-muted mb-0">Total Comments</p>
            </div>
        </div>
    </div>
</div>

    <!-- User's Jokes Management -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-light">
                    <h4 class="mb-0">
                        <i class="fas fa-list me-2"></i>
                        Your Jokes
                    </h4>
                </div>
                <div class="card-body">
                    @if (_isLoading)
                    {
                        <div class="text-center py-4">
                            <div class="spinner-border text-secondary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading your jokes...</p>
                        </div>
                    }
                    else if (_userJokes != null && _userJokes.Any())
                    {
                        <div class="list-group list-group-flush" >
                            @foreach (var joke in _userJokes.Take(_visibleCount))
                            {
                                <div class="list-group-item px-2 py-3">
                                    <div class="d-flex flex-column flex-sm-row justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <div class="d-flex align-items-center mb-1 flex-wrap">
                                                <span class="badge bg-secondary me-2">@joke.ClassificationName</span>
                                                <span class="@GetStatusColor(joke.IsApproved) small me-2">@GetStatusName(joke.IsApproved)</span>
                                                <small class="text-muted ms-sm-auto">@joke.SubmissionDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                            <div class="fw-semibold text-dark mb-1" style="word-break:break-word;">@joke.Text</div>
                                            <div class="text-muted small">
                                                <i class="bi bi-hand-thumbs-up me-1"></i>@joke.LikeCount
                                                <i class="bi bi-chat-right-dots me-1"></i>@joke.CommentCount
                                            </div>
                                        </div>
                                        <div class="dropdown ms-0 ms-sm-2 mt-2 mt-sm-0">
                                            <button class="btn btn-link text-secondary p-0" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                <i class="bi bi-three-dots-vertical"></i>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end">
                                                <li>
                                                    <a class="dropdown-item" @onclick="() => ViewJoke(joke.JokeId)">
                                                        <i class="bi bi-eye me-2"></i>View
                                                    </a>
                                                </li>
                                                <li>
                                                    <a class="dropdown-item" @onclick="() => EditJoke(joke.JokeId)">
                                                        <i class="bi bi-pencil me-2"></i>Edit
                                                    </a>
                                                </li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        @if (_userJokes.Count > _visibleCount)
                        {
                            <div class="text-center mt-3">
                                <button class="btn btn-outline-secondary" @onclick="ShowMoreJokes">Show More</button>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-laugh-wink text-muted" style="font-size: 4rem; opacity: 0.3;"></i>
                            <h5 class="mt-3 text-muted">No jokes yet!</h5>
                            <p class="text-muted">Start sharing with the world.</p>
                            <a href="/suggest" class="btn btn-secondary">
                                <i class="bi bi-plus-circle-dotted me-2"></i>
                                Submit Your First Joke
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
    <div style="height: 2rem;"></div>
</div>

<EditJokeModal @ref="editJokeModal" JokeId="@selectedJokeId" OnSaved="ReloadJokes" />

@code {
    private List<JokePreviewDto>? _userJokes;
    private bool _isLoading = true;
    private int _visibleCount = 5;
    private EditJokeModal? editJokeModal;
    private int selectedJokeId;
    protected override async Task OnInitializedAsync()
    {
        await LoadUserJokes();
    }
    private async void EditJoke(int jokeId)
    {
        selectedJokeId = jokeId;
        StateHasChanged();
        if (editJokeModal != null)
            await editJokeModal.Show();
    }
    private async Task ReloadJokes()
    {
        await LoadUserJokes();
    }
    private async Task LoadUserJokes()
    {
        try
        {
            _isLoading = true;
            var posted = await ApiClient.GetAsync<List<JokePreviewDto>>("api/joke/suggested-by-me");
            _userJokes = posted.Data;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading user jokes: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ViewJoke(int jokeId)
    {
        NavigationManager.NavigateTo($"/joke/{jokeId}");
    }
    private void ShowMoreJokes()
    {
        _visibleCount += 5;
    }
    private string GetStatusName(bool? isApproved) => isApproved switch
    {
        null => "Pending",
        true => "Approved!",
        false => "Rejected.."
    };
    private string GetStatusColor(bool? isApproved) => isApproved switch
    {
        null => "text-warning",
        true => "text-success",
        false => "text-danger"
    };
}

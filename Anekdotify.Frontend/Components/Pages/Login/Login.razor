@page "/login"
@using Anekdotify.Frontend.Services
@using Anekdotify.Models.Models
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Mvc
@using Microsoft.JSInterop

@rendermode InteractiveServer
@inject ApiClient ApiClient
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IOAuthService OAuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ILogger<Login> Logger

<PageTitle>Login - Anekdotify</PageTitle>

<div class="d-flex justify-content-center align-items-center min-vh-100 px-3">
    <div class="card shadow-lg w-100" style="max-width: 40rem;">
        <div class="card-body p-3 p-sm-4">
            <h4 class="card-title text-center mb-3 mb-sm-4">Welcome to Anekdotify</h4>
            <p class="text-center text-muted mb-3 mb-sm-4">Sign in to your account</p>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    @_errorMessage
                </div>
            }

            <!-- Login form -->
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
                <DataAnnotationsValidator />

                <div class="mb-3">
                    <label for="email" class="form-label">Email address</label>
                    <InputText @bind-Value="loginModel.Username" class="form-control" id="email"
                        placeholder="name@example.com" />
                    <ValidationMessage For="() => loginModel.Username" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText type="password" @bind-Value="loginModel.Password" class="form-control" id="password"
                        placeholder="Password" />
                    <ValidationMessage For="() => loginModel.Password" class="text-danger" />
                </div>

                <div class="d-grid mb-3">
                    <button type="submit" class="btn btn-dark" disabled="@_isLoading">
                        @if (_isLoading && _loadingProvider == "Local")
                        {
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        }
                        Sign In
                    </button>
                </div>
            </EditForm>

            <hr class="my-3 my-sm-4" />
            <p class="text-center mb-3">Or continue with</p>

            <!-- OAuth Icon Buttons -->
            <div class="d-flex justify-content-center gap-2 gap-sm-3 mb-3 mb-sm-4">
                <button type="button" class="btn btn-outline-dark d-flex align-items-center justify-content-center"
                    @onclick="LoginWithGitHub" disabled="@_isLoading" style="width: 45px; height: 45px;">
                    @if (_loadingProvider == "GitHub")
                    {
                        <div class="spinner-border spinner-border-sm" role="status"></div>
                    }
                    else
                    {
                        <i class="bi bi-github fs-6 fs-sm-5"></i>
                    }
                </button>

                <button type="button" class="btn btn-outline-dark d-flex align-items-center justify-content-center"
                    @onclick="LoginWithGoogle" disabled="@_isLoading" style="width: 45px; height: 45px;">
                    @if (_loadingProvider == "Google")
                    {
                        <div class="spinner-border spinner-border-sm" role="status"></div>
                    }
                    else
                    {
                        <i class="bi bi-google fs-6 fs-sm-5"></i>
                    }
                </button>
            </div>

            <p class="text-center">
                Don't have an account? <a href="/register" class="text-decoration-none">Sign up</a>
            </p>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginDto loginModel { get; set; } = new();


    private string? _errorMessage;
    private bool _isLoading = false;
    private string? _loadingProvider;

    protected override void OnInitialized()
    {
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("error", out var error))
        {
            _errorMessage = error.ToString();
        }
    }

    private async Task LoginWithGitHub()
    {
        try
        {
            _isLoading = true;
            _loadingProvider = "GitHub";
            _errorMessage = null;
            StateHasChanged();

            var oauthResponse = await OAuthService.GetGitHubLoginUrlAsync();
            if (oauthResponse != null && !string.IsNullOrEmpty(oauthResponse.Url))
            {
                Logger.LogInformation("Redirecting to GitHub OAuth URL: {Url}", oauthResponse.Url);
                NavigationManager.NavigateTo(oauthResponse.Url, forceLoad: true);
            }
            else
            {
                _errorMessage = "Failed to get GitHub OAuth URL. Please try again.";
                Logger.LogError("Failed to get GitHub OAuth URL - response was null or URL was empty");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initiate GitHub login");
            _errorMessage = "Failed to initiate GitHub login. Please try again.";
        }
        finally
        {
            _isLoading = false;
            _loadingProvider = null;
            StateHasChanged();
        }
    }

    private async Task LoginWithGoogle()
    {
        try
        {
            _isLoading = true;
            _loadingProvider = "Google";
            _errorMessage = null;
            StateHasChanged();

            var oauthResponse = await OAuthService.GetGoogleLoginUrlAsync();
            if (oauthResponse != null && !string.IsNullOrEmpty(oauthResponse.Url))
            {
                Logger.LogInformation("Redirecting to Google OAuth URL: {Url}", oauthResponse.Url);
                NavigationManager.NavigateTo(oauthResponse.Url, forceLoad: true);
            }
            else
            {
                _errorMessage = "Failed to get Google OAuth URL. Please try again.";
                Logger.LogError("Failed to get Google OAuth URL - response was null or URL was empty");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initiate Google login");
            _errorMessage = "Failed to initiate Google login. Please try again.";
        }
        finally
        {
            _isLoading = false;
            _loadingProvider = null;
            StateHasChanged();
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            _isLoading = true;
            var response = await ApiClient.PostAsync<LoginResponseModel, LoginDto>("api/account/login", loginModel);
            if (response.IsSuccess && response.Data != null)
            {
                await ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(response.Data);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ToastService?.ShowError("Login failed. Please check your credentials.");
            }
            loginModel = new LoginDto();
        }
        catch (Exception e)
        {
            ToastService?.ShowError($"An error occurred while logging in: {e.Message}");
        }
        finally
        {
            _isLoading = false;
            _loadingProvider = null;
        }
    }
}
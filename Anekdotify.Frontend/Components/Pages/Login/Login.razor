@page "/login"

@layout MainLayout
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode RenderMode.InteractiveServer

<div class="container d-flex justify-content-md-center align-items-lg-start vh-100">
    <div class="card shadow-lg" style="width: 25rem;">
        <div class="card-body p-4">
            <h4 class="card-title text-center mb-4">Login</h4>
            <EditForm Model="loginModel" FormName="login" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                    <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                </div>
                <div class="d-grid mt-4">
                    <button type="submit" class="btn btn-dark">Login</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginDTO loginModel = new LoginDTO();

    private async Task HandleLogin()
    {
        var res = await ApiClient.PostAsync<LoginResponseModel, LoginDTO>("api/account/login", loginModel);
        if(res != null && res.Token != null)
        {
            await ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(res.Token);
            NavigationManager.NavigateTo("/");
        }
    }
}

@page "/login"
@using Microsoft.AspNetCore.Mvc
@layout MainLayout
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode RenderMode.InteractiveServer


<div class="card shadow-lg" style="width: 25rem;">
    <div class="card-body p-4">
        <h4 class="card-title text-center mb-4">Login</h4>
        <EditForm Model="loginModel" FormName="login" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <label for="username" class="form-label">Username</label>
                <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                <ValidationMessage For="@(() => loginModel.Username)" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
            </div>
            <div class="d-grid mt-4">
                <button type="submit" class="btn btn-dark">Login</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private LoginDTO loginModel = new LoginDTO();
    [Inject] 
    private IToastService ToastService { get; set; }
    private async Task HandleLogin()
    {
        var res = await ApiClient.PostAsync<ActionResult, LoginDTO>("api/account/login", loginModel);
        if (res is BadRequestObjectResult badRequest)
        {
            var error = badRequest.Value as string;
            if (!string.IsNullOrEmpty(error))
            {
                ToastService.ShowError(error);
            }
            return;
        }
        if (res is UnauthorizedObjectResult unauthorized)
        {
            var error = unauthorized.Value as string;
            if (!string.IsNullOrEmpty(error))
            {
                ToastService.ShowError(error);
            }
            return;
        }
        if (res is OkObjectResult okResult)
        {
            var token = okResult.Value as string;
            if (!string.IsNullOrEmpty(token))
            {
                await ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(token);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ToastService.ShowError("Login failed. Please try again.");
            }
            return;
        }
    }
}

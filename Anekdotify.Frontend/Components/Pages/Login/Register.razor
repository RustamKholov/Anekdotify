@page "/register"
@using Microsoft.AspNetCore.Mvc
@layout MainLayout
@inject ApiClient ApiClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="d-flex justify-content-center align-items-center h-100 w-100">
    <div class=" card shadow-lg" style="width: 25rem;">
        <div class="card-body p-4">
            <h4 class="card-title text-center mb-4">Registration</h4>
            <EditForm Model="registerModel" FormName="register" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="username" class="form-label">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
                    <ValidationMessage For="@(() => registerModel.Username)" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="password" class="form-label">Password</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="registerModel.Password" />
                    <ValidationMessage For="@(() => registerModel.Password)" class="text-danger" />
                </div>
                <div class="d-grid mt-4">
                    <button type="submit" class="btn btn-dark">
                        @if (isLoading)
                        {
                            <div class="text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <a>Register</a>
                        }
                    </button>
                </div>
                <a href="/login" class="d-block text-center mt-3">Have an account? Login</a>
            </EditForm>
        </div>
    </div>
</div>


@code {
    private RegisterDTO registerModel = new RegisterDTO();
    [Inject] 
    private IToastService? ToastService { get; set; }
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        try
        {
            isLoading = true;
            var response = await ApiClient.PostAsync<RegisterResponseModel, RegisterDTO>("api/account/register", registerModel);

            if (response == null || response.Data == null)
            {
                ToastService?.ShowError("Registration failed. Please try again.");
                return;
            }
            if (!response.IsSuccess)
            {
                ToastService?.ShowError($"Registration failed. {response.ErrorMessage}.");
                return;
            }
            var loginModel = new LoginResponseModel
                {
                    Token = response.Data.Token,
                    RefreshToken = response.Data.RefreshToken,
                    ExpiresIn = response.Data.ExpiresIn
                };

            if (response.IsSuccess)
            {
                await ((CustomAuthStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(loginModel);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                ToastService?.ShowError("Registration failed. Please check your credentials.");
            }
            registerModel = new RegisterDTO();
        }
        catch (Exception e)
        {
            ToastService?.ShowError($"An error occurred during registration: {e.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}

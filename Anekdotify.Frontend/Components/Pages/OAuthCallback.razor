@page "/auth/callback"
@using Anekdotify.Frontend.Services
@using Microsoft.AspNetCore.WebUtilities
@inject IOAuthService OAuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<OAuthCallback> Logger

<PageTitle>Authenticating...</PageTitle>

<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="text-center">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-3">Completing authentication...</p>
        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <p class="text-muted small">@_statusMessage</p>
        }
    </div>
</div>

@code {
    private string _statusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _statusMessage = "Processing authentication...";
            StateHasChanged();

            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("token", out var token) &&
            query.TryGetValue("refreshToken", out var refreshToken) &&
            query.TryGetValue("expiresIn", out var expiresInStr) &&
            long.TryParse(expiresInStr, out var expiresIn))
            {
                _statusMessage = "Finalizing login...";
                StateHasChanged();

                await OAuthService.HandleOAuthCallbackAsync(token!, refreshToken!, expiresIn);
            }
            else if (query.TryGetValue("error", out var error))
            {
                Logger.LogWarning("OAuth callback error: {Error}", error.ToString() ?? "Unknown error");
                var errorMessage = error.ToString() switch
                {
                    "external_login_failed" => "External login failed. Please try again.",
                    "missing_user_info" => "Could not retrieve user information from the provider.",
                    "user_creation_failed" => "Failed to create user account.",
                    "internal_error" => "An internal error occurred. Please try again.",
                    _ => "Authentication failed. Please try again."
                };

                Navigation.NavigateTo($"/login?error={Uri.EscapeDataString(errorMessage)}");
            }
            else
            {
                Logger.LogWarning("Invalid OAuth callback - missing required parameters");
                Navigation.NavigateTo("/login?error=Invalid authentication response");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in OAuth callback");
            Navigation.NavigateTo("/login?error=Authentication failed");
        }
    }
}
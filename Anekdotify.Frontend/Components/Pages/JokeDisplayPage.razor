@using Anekdotify.Frontend.Components.BaseComponents
@inject ApiClient ApiClient
@inject IToastService ToastService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex flex-row">
    <div class="flex-grow-1">
        <div class="d-flex flex-column align-items-center">

            @if (joke != null)
            {
                <div class="w-75 w-md-75">
                    <div class="position-relative">
                        <JokeCard Joke="@joke" />
                        <div class="d-flex flex-column align-items-center w-100">
                            <div style="height: 16px;"></div>
                            <GetJokeButton GetRandomJoke="GetRandomJoke" />
                            <div style="height: 32px;"></div>
                            <div class="w-100">
                                <CommentsModal JokeId="@joke.JokeId" OnCommentsChanged="UpdateComments" />
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (isLoading)
            {
                <div class="w-75">
                    <div class="position-relative">

                        <div class="card shadow-sm rounded-4 mb-4 p-3"
                            style="w - 100; height: 35vh; position: relative; overflow: hidden;">
                            <div class="card-body d-flex justify-content-center align-items-center text-center">
                                <div class="spinner-border" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>

                        <div class="d-flex flex-column align-items-center">
                            <div style="height: 16px;"></div>
                            <GetJokeButton GetRandomJoke="GetRandomJoke" />
                        </div>

                    </div>
                </div>
            }
            else
            {
                <div class="w-75">
                    <div class="position-relative">

                        <div class="card shadow-sm rounded-4 mb-4 p-3"
                            style="w-100; height: 35vh; position: relative; overflow: hidden;">
                            <div class="card-body d-flex justify-content-center align-items-center text-center">
                                <p class="card-text text-secondary fs-5">Click the button below to get a random joke.</p>
                            </div>
                        </div>

                        <div class="d-flex flex-column align-items-center">
                            <div style="height: 16px;"></div>
                            <GetJokeButton GetRandomJoke="GetRandomJoke" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {

    private JokeDTO? joke;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var lastViewedActualRes = await ApiClient.GetAsync<bool>("api/joke/last-viewed/isActual");

        if (lastViewedActualRes.IsSuccess && lastViewedActualRes.Data)
        {
            var previousJokeResult = await ApiClient.GetAsync<JokeDTO>("api/joke/last-viewed");
            var previousJoke = previousJokeResult.Data;
            if (previousJokeResult.IsSuccess && previousJoke != null)
            {
                joke = previousJoke;
                StateHasChanged();
            }
        }
        bool toastShown = await LocalStorageService.GetItemAsync<bool>("toastShown");

        if (!toastShown)
        {
            ToastService.ShowSuccess("Welcome to Anekdotify! You are logged in.");
            await LocalStorageService.SetItemAsync("toastShown", true);
        }
    }

    private async Task GetRandomJoke()
    {
        isLoading = true;
        joke = null;
        try
        {
            var result = await ApiClient.GetAsync<JokeDTO>("api/joke/random");

            if (result.IsSuccess && result.Data != null)
            {
                joke = result.Data;
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError(result.ErrorMessage ?? "Failed to fetch joke.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An unexpected error occurred: {ex.Message}");
        }
        finally
        {

            isLoading = false;
            StateHasChanged();
        }
    }

    private void UpdateComments(List<CommentDTO> comments)
    {
        if (joke != null)
        {
            joke.Comments = comments;
            StateHasChanged();
        }
    }
}
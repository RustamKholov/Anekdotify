@using Anekdotify.Frontend.Components.BaseComponents
@inject Anekdotify.Frontend.Clients.ApiClient ApiClient
@inject IToastService ToastService
@inject ILocalStorageService LocalStorageService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="d-flex flex-column h-100 w-100">

    <div class="flex-grow-1 overflow-auto">
        <div class="d-flex justify-content-center align-items-center" style="min-height: 25vh;">
            @if (joke != null)
            {
                <JokeCard Joke="@joke" />
            }
            else if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <p>Click "Get Daily Joke" to fetch one!</p>
            }
        </div>
        <GetJokeButton GetRandomJoke="GetRandomJoke"></GetJokeButton>
    </div>


</div>

@code {

    private JokeDTO joke;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var lastViewedActualRes = await ApiClient.GetAsync<bool>("api/joke/last-viewed/isActual");

        if (lastViewedActualRes.IsSuccess && lastViewedActualRes.Data)
        {
            var previousJokeResult = await ApiClient.GetAsync<JokeDTO>("api/joke/last-viewed");
            var previousJoke = previousJokeResult.Data;
            if (previousJokeResult.IsSuccess && previousJoke != null)
            {
                joke = previousJoke;
                StateHasChanged();
            }
        }
        bool toastShown = await LocalStorageService.GetItemAsync<bool>("toastShown");

        if (!toastShown)
        {
            ToastService.ShowSuccess("Welcome to Anekdotify! You are logged in.");
            await LocalStorageService.SetItemAsync("toastShown", true);
        }
    }

    private async Task GetRandomJoke()
    {
        isLoading = true;
        joke = null;
        try
        {
            var result = await ApiClient.GetAsync<JokeDTO>("api/joke/random");

            if (result.IsSuccess && result.Data != null)
            {
                joke = result.Data;
                StateHasChanged();
            }
            else
            {
                ToastService.ShowError(result.ErrorMessage ?? "Failed to fetch joke.");
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"An unexpected error occurred: {ex.Message}");
        }
        finally
        {
            
            isLoading = false;
            StateHasChanged();
        }
    }
}
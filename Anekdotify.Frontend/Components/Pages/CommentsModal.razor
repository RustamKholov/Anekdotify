@using Microsoft.IdentityModel.JsonWebTokens
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject ApiClient ApiClient
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="collapse" id="collapse_comments_@JokeId">
    <div class="comments-modal-container card card-body w-100 comments-modal-container" style="max-height:30vh;">

        <!-- Reply to info -->
        @if (_replyingToUsername != null)
        {
            <div class="alert alert-info py-1 px-2 small mb-2">
                Replying to <strong>@_replyingToUsername</strong>
                <button class="btn-close btn-sm float-end" @onclick="CancelReply"></button>
            </div>
        }

        <!-- Post comment (sticky) -->
        <div class="mb-3 sticky-top bg-white pt-2 pb-2" style="z-index:2;">
            <label class="form-label fw-semibold mb-1">@_currentUsername:</label>
            <EditForm Model="@Create" OnValidSubmit="PostComment">
                <div class="d-flex">
                    <InputText class="form-control me-2" placeholder="Write a comment..."
                        @bind-Value="_newCommentText" />
                    <button class="btn btn-secondary" type="submit">Post</button>
                </div>
            </EditForm>
        </div>

        <!-- Comments -->
        <div class="overflow-auto" style="max-height:calc(75vh - 80px);">
            @if (Comments == null)
            {
                <p class="text-muted">Loading comments...</p>
            }
            else if (!Comments.Any())
            {
                <p class="text-muted">No comments yet.</p>
            }
            else
            {
                @foreach (var comment in Comments)
                {

                    <Comment CommentDto="@comment" SetReplyTo="SetReplyTo" ExpandedReplies="@_expandedReplies"
                        ToggleReplies="ToggleReplies" OnCommentDeleted="HandleCommentDeleted" />


                    @if (_expandedReplies.Contains(comment.CommentId))
                    {
                        <div class="mt-2 ms-3 border-start ps-2">
                            @{
                                var flatReplies = FlattenReplies(comment.Replies);
                                foreach (var (reply, _, parentUsername) in flatReplies)
                                {
                                    <CommentReply ReplyToUsername="@parentUsername" Reply="@reply" SetReplyTo="SetReplyTo" />
                                }
                            }
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public int JokeId { get; set; }
    [Parameter] public EventCallback<List<CommentDTO>> OnCommentsChanged { get; set; }
    private List<CommentDTO>? Comments { get; set; }
    private CommentCreateDTO Create { get; set; } = new CommentCreateDTO();

    private readonly HashSet<int> _expandedReplies = new();

    private string _newCommentText = "";
    private string? _replyingToUsername;
    private string _currentUsername = "Guest";
    private int _currentReplyToCommentId;

    protected override async Task OnInitializedAsync()
    {

        Comments = await LoadComments(JokeId);

        var res = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (res.User.Identity?.IsAuthenticated == true)
        {
            _currentUsername = res.User.FindFirst(JwtRegisteredClaimNames.GivenName)?.Value!;
        }
    }

    private void ToggleReplies(int commentId)
    {
        if (!_expandedReplies.Add(commentId))
            _expandedReplies.Remove(commentId);
    }

    private async Task<List<CommentDTO>> LoadComments(int jokeId)
    {
        var res = await ApiClient.GetAsync<List<CommentDTO>>($"api/comments?JokeId={jokeId}");
        if (res.IsSuccess)
        {
            return res.Data ?? new List<CommentDTO>();
        }
        else
        {
            ToastService.ShowError("Failed to load comments");
            return new List<CommentDTO>();
        }
    }

    private async Task HandleCommentDeleted(int commentId)
    {
        Comments = await LoadComments(JokeId);
        await OnCommentsChanged.InvokeAsync(Comments);
        StateHasChanged();
    }


    private void SetReplyTo((string username, int commentId) data)
    {
        _replyingToUsername = data.username;
        _currentReplyToCommentId = data.commentId;
    }

    private void CancelReply()
    {
        _replyingToUsername = null;
        StateHasChanged();
    }

    private async Task PostComment()
    {
        var res = await ApiClient.PostAsync<CommentDTO, CommentCreateDTO>($"api/comments/{JokeId}", new CommentCreateDTO
        {
            CommentText = _newCommentText,
            ParentCommentId = _currentReplyToCommentId
        });
        if (res is { IsSuccess: true, Data: not null })
        {
            Comments = await LoadComments(JokeId);
            await OnCommentsChanged.InvokeAsync(Comments);
            StateHasChanged();
        }
        else
        {
            ToastService.ShowError("Failed to post comment");
        }
        _newCommentText = "";
        _currentReplyToCommentId = 0;
        _replyingToUsername = null;
        CancelReply();
        StateHasChanged();
    }

    private List<(CommentDTO Reply, int? ParentCommentId, string? ParentUsername)> FlattenReplies(List<CommentDTO> replies,
    int? parentId = null, string? parentUsername = null)
    {
        var flat = new List<(CommentDTO, int?, string?)>();
        foreach (var reply in replies.OrderBy(r => r.CommentDate))
        {
            flat.Add((reply, parentId, parentUsername));
            if (reply.Replies.Any())
            {
                flat.AddRange(FlattenReplies(reply.Replies, reply.CommentId, reply.Username));
            }
        }
        return flat;
    }
}
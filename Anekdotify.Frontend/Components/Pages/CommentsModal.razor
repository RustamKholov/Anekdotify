@using Microsoft.IdentityModel.JsonWebTokens
@rendermode @(new InteractiveServerRenderMode(prerender:false))
@inject ApiClient ApiClient
@inject IToastService ToastService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="collapse" id="collapse_comments_@JokeId">
    <div class="card card-body overflow-auto w-100" style="max-height: 50vh;">

        <!-- Reply to info -->
        @if (ReplyingToUsername != null)
        {
            <div class="alert alert-info py-1 px-2 small mb-2">
                Replying to <strong>@ReplyingToUsername</strong>
                <button class="btn-close btn-sm float-end" @onclick="CancelReply"></button>
            </div>
        }

        <!-- Post comment -->
        <div class="mb-3">
            <label class="form-label fw-semibold mb-1">@CurrentUsername:</label>
            <div class="d-flex">
                <input type="text"
                       class="form-control me-2"
                       placeholder="Write a comment..."
                       @bind="NewCommentText"
                       @onkeypress="HandleEnterPress" />
                <button class="btn btn-primary" @onclick="PostComment">Post</button>
            </div>
        </div>

        <!-- Comments -->
        @if (Comments == null)
        {
            <p class="text-muted">Loading comments...</p>
        }
        else if (!Comments.Any())
        {
            <p class="text-muted">No comments yet.</p>
        }
        else
        {
            @foreach (var comment in Comments)
            {

                <Comment CommentDto="@comment"
                        SetReplyTo="SetReplyTo"
                        ExpandedReplies="@ExpandedReplies"
                        ToggleReplies="ToggleReplies"/> 
                

                    @if (ExpandedReplies.Contains(comment.CommentId))
                    {
                        
                        <div class="mt-2 ms-3 border-start ps-2">
                            @{
                                var flatReplies = FlattenReplies(comment.Replies);
                                foreach (var (reply, parentId, parentUsername) in flatReplies)
                                {
                                    <CommentReply ReplyToUsername="@parentUsername"
                                                  Reply="@reply"
                                                  SetReplyTo="SetReplyTo" />
                                }
                            }
                        </div>
                    }
            }
        }
    </div>
</div>

@code {
    [Parameter] public int JokeId { get; set; }
    [Parameter] public List<CommentDTO>? Comments { get; set; }
    [Parameter] public EventCallback<List<CommentDTO>> OnCommentsChanged { get; set; }

    private HashSet<int> ExpandedReplies = new();

    private string NewCommentText = "";
    private string? ReplyingToUsername = null;
    private string CurrentUsername = "Guest";
    private int CurrentReplyToCommentId = 0;

    protected override async Task OnInitializedAsync()
    {
        Comments = await LoadComments(JokeId);
        var res = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (res.User.Identity?.IsAuthenticated == true)
        {
            CurrentUsername = res.User.FindFirst(JwtRegisteredClaimNames.GivenName)?.Value!;
        }
    }

    private void ToggleReplies(int commentId)
    {
        if (!ExpandedReplies.Add(commentId))
            ExpandedReplies.Remove(commentId);
    }

    private async Task<List<CommentDTO>> LoadComments(int jokeId)
    {
        var res = await ApiClient.GetAsync<List<CommentDTO>>($"api/comments?JokeId={jokeId}");
        if (res.IsSuccess)
        {
            return res.Data ?? new List<CommentDTO>();
        }
        else
        {
            ToastService.ShowError("Failed to load comments");
            return new List<CommentDTO>();
        }
    }



    private void SetReplyTo((string username, int commentId) data)
    {
        ReplyingToUsername = data.username;
        CurrentReplyToCommentId = data.commentId;
    }

    private void CancelReply()
    {
        ReplyingToUsername = null;
        StateHasChanged();
    }

    private async Task PostComment()
    {
        var res = await ApiClient.PostAsync<CommentDTO, CommentCreateDTO>($"api/comments/{JokeId}", new CommentCreateDTO
            {
                CommentText = NewCommentText,
                ParentCommentId = CurrentReplyToCommentId
            });
        if (res.IsSuccess && res.Data != null)
        {
            Comments = await LoadComments(JokeId);
            await OnCommentsChanged.InvokeAsync(Comments);
            StateHasChanged();
        }
        else
        {
            ToastService.ShowError("Failed to post comment");
        }
        NewCommentText = "";
        CurrentReplyToCommentId = 0;
        ReplyingToUsername = null;
        CancelReply();
        StateHasChanged();
    }

    private async Task HandleEnterPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await PostComment();
        }
    }
    private List<(CommentDTO Reply, int? ParentCommentId, string? ParentUsername)> FlattenReplies(List<CommentDTO> replies, int? parentId = null, string? parentUsername = null)
    {
        var flat = new List<(CommentDTO, int?, string?)>();
        foreach (var reply in replies.OrderBy(r => r.CommentDate))
        {
            flat.Add((reply, parentId, parentUsername));
            if (reply.Replies != null && reply.Replies.Any())
            {
                flat.AddRange(FlattenReplies(reply.Replies, reply.CommentId, reply.Username));
            }
        }
        return flat;
    }
}

@functions {
    string GetTimeAgo(DateTime date)
    {
        var span = DateTime.UtcNow - date;
        if (span.TotalDays >= 1)
            return $"{(int)span.TotalDays} day{(span.TotalDays >= 2 ? "s" : "")} ago";
        if (span.TotalHours >= 1)
            return $"{(int)span.TotalHours} hour{(span.TotalHours >= 2 ? "s" : "")} ago";
        if (span.TotalMinutes >= 1)
            return $"{(int)span.TotalMinutes} minute{(span.TotalMinutes >= 2 ? "s" : "")} ago";
        return "just now";
    }
}
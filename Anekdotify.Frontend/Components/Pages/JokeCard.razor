@using Anekdotify.Common
@using Anekdotify.Frontend.Components.BaseComponents
@using Anekdotify.Models.DTOs.JokeRating
@using Microsoft.AspNetCore.Mvc
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject ApiClient ApiClient
@inject IToastService ToastService
@rendermode RenderMode.InteractiveServer

<div class="card shadow-sm rounded-4 mb-4 p-3 h-100" style="min-height: 300px; max-height: 300px;">

    <AuthorizeView Roles="Admin">
        <Authorized>
            <div class="card-header bg-transparent border-bottom-0 d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    <a class="btn btn-outline-secondary btn-sm me-2" href="@JokeUrl(Joke.JokeId)" title="Edit">
                        <i class="bi bi-pencil"></i>
                    </a>
                    <button class="btn btn-outline-danger" @onclick="() => {DeleteId = Joke.JokeId; Modal.Show();}">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>

    <div class="card-body d-flex flex-column justify-content-center align-items-center text-center">
        <p class="card-text text-secondary fs-5">@Joke.Text</p>
    </div>

    
    <div class="d-flex justify-content-between align-items-center px-3 pb-2 small text-muted">

        
        <span class="badge rounded-pill bg-light border text-muted me-2">@Joke.ClassificationName</span>

        
        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-sm btn-success d-flex align-items-center" title="Like" @onclick="async () => await SetRate(true)">
                <i class="bi bi-hand-thumbs-up"></i>
                <span class="ms-1">@Joke.TotalLikes</span>
            </button>

            <button class="btn btn-sm btn-danger d-flex align-items-center" title="Dislike" @onclick ="async () => await SetRate(false)">
                <i class="bi bi-hand-thumbs-down"></i>
                <span class="ms-1">@Joke.TotalDislikes</span>
            </button>

            <button class="btn btn-sm btn-outline-secondary d-flex align-items-center"
                    data-bs-toggle="collapse"
                    data-bs-target="#commentCollapseToJoke_@Joke.JokeId"
                    aria-expanded="false"
                    aria-controls="collapseExample">
                <i class="bi bi-chat-left-text"></i>
                <span class="ms-1">@Joke.Comments.Count</span>
            </button>
        </div>
    </div>
</div>

<AppModal @ref="Modal">
    <Title>Notification</Title>
    <Body>
        <p>Are you sure you want to delete this joke?</p>
        <p class="text-danger">This action cannot be undone.</p>
    </Body>
    <Footer>
        <button class="btn btn-secondary" @onclick="() => Modal.Close()">Cancel</button>
        <button class="btn btn-danger" @onclick="async () => await HandleDelete()">Delete</button>
    </Footer>
</AppModal>

@code {

    [Parameter]
    public JokeDTO Joke {get; set;}

    public AppModal Modal { get; set; }

    public int DeleteId { get; set; }


    private static string JokeUrl(int id) => $"/editJoke/{id}";

    private async Task HandleDelete()
    {
        var res = await ApiClient.DeleteAsync($"api/joke/{DeleteId}");
        if (!res.IsSuccess)
        {
            ToastService.ShowError("Failed to delete joke");
            return;
        }
        ToastService.ShowSuccess("Joke deleted successfully");
        Modal.Close();
        NavigationManager.NavigateTo("/", true);
    }

    private async Task SetRate(bool isLike)
    {
        var jokeRate = new JokeRatingDTO
            {
                JokeId = Joke.JokeId,
                IsLike = isLike
            };
        var res = await ApiClient.PutAsync<RatingDTO, bool>($"api/joke/{Joke.JokeId}/rating", isLike);
        if (!res.IsSuccess)
        {
            ToastService.ShowError("Failed to rate joke");
            return;
        }
        ToastService.ShowSuccess("Joke rated successfully");
        if (isLike)
        {
            Joke.TotalLikes++;
        }
        else
        {
            Joke.TotalDislikes++;
        }
        NavigationManager.Refresh();
    }
}
@using Anekdotify.Common
@using Anekdotify.Frontend.Components.BaseComponents
@using Anekdotify.Models.DTOs.JokeRating
@using Microsoft.AspNetCore.Mvc
@inject NavigationManager NavigationManager
@inject ApiClient ApiClient
@inject IToastService ToastService
@rendermode @(new InteractiveServerRenderMode(prerender:false))


@if (SelectedJokeId != null)
{
    <CommentsModal Joke="@Joke" Comments="@comments" OnClose="@CloseModal" />
}

<div class="card shadow-sm rounded-4 mb-4 p-3 h-100" style="min-height: 300px; max-height: 300px; position: relative;">

    <!-- Save Icon -->
    <button class="btn btn-sm btn-light position-absolute top-0 end-0 m-2" title="Save joke" @onclick="() => OnSaveClick()">
        <i class="bi @(isSaved == false || isSaved == null ? "bi-bookmark" : "bi-bookmark-fill")"></i>
    </button>

    <!-- Admin Tools -->
    <AuthorizeView Roles="Admin">
        <Authorized>
            <div class="card-header bg-transparent border-bottom-0 d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    @if (Joke != null)
                    {
                        <a class="btn btn-outline-secondary btn-sm me-2" href="@JokeUrl(Joke.JokeId)" title="Edit">
                            <i class="bi bi-pencil"></i>
                        </a>
                        <button class="btn btn-outline-danger" @onclick="() => { DeleteId = Joke.JokeId; Modal?.Show(); }">
                        <i class="bi bi-trash"></i>
                        </button>
                    }
                    
                </div>
            </div>
        </Authorized>
    </AuthorizeView>

    <!-- Joke Content -->
    <div class="card-body d-flex flex-column justify-content-center align-items-center text-center">
        <p class="card-text text-secondary fs-5">@((Joke != null) ? Joke.Text : "")</p>
    </div>

    <!-- Joke Footer -->
    <div class="d-flex justify-content-between align-items-center px-3 pb-2 small text-muted">
        <span class="badge rounded-pill bg-light border text-muted me-2">@((Joke != null) ? Joke.ClassificationName : "")</span>

        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-sm @(isLiked == true ? "btn-success" : "btn-outline-success")"
            title="Like" @onclick="() => OnRateClick(true)">
                <i class="bi bi-hand-thumbs-up"></i>
                <span class="ms-1">@Joke?.TotalLikes</span>
            </button>

            <button class="btn btn-sm @(isLiked == false ? "btn-danger" : "btn-outline-danger")"
            title="Dislike" @onclick="() => OnRateClick(false)">
                <i class="bi bi-hand-thumbs-down"></i>
                <span class="ms-1">@Joke?.TotalDislikes</span>
            </button>

            <button class="btn btn-sm btn-outline-secondary d-flex align-items-center" @onclick="() => OpenComments(Joke?.JokeId ?? 0)">
                <i class="bi bi-chat-left-text"></i>
                <span class="ms-1">@Joke?.Comments.Capacity</span>
            </button>
        </div>
    </div>
</div>

<!-- Modal -->
<AppModal @ref="Modal">
    <Title>Notification</Title>
    <Body>
        <p>Are you sure you want to delete this joke?</p>
        <p class="text-danger">This action cannot be undone.</p>
    </Body>
    <Footer>
        <button class="btn btn-secondary" @onclick="() => { if (Modal != null) Modal.Close(); }">Cancel</button>
        <button class="btn btn-danger" @onclick="async () => await HandleDelete()">Delete</button>
    </Footer>
</AppModal>




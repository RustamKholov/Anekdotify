@page "/editComment/{id:int}"
@using frontend.Comments.DTOs
@inject NavigationManager NavigationManager 
@inject JokesClient jokesClient
@inject CommentClient commentClient
@rendermode InteractiveServer

<PageTitle>@Title</PageTitle>
<h3>@Title</h3>

@if(commentEditDTO is null)
{
    <p><em>Loading....</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="@commentEditDTO" FormName="editComment" OnValidSubmit="OnSubmitAsync">
            <DataAnnotationsValidator/>
            <div class="mb-3">
                <label for="text" class="form-label">Text:</label>
                <InputTextArea  type="text" @bind-Value="commentEditDTO.Text" class="form-control" id="text" />
                <ValidationMessage For="() => commentEditDTO.Text"/>
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
            <a role="button" class="btn btn-secondary" href="/">Cancel</a>
            </EditForm>
        </div>
    </div>
}


@code 
{
    [Parameter]
    public int? Id {get; set;}
    [SupplyParameterFromForm]
    private CommentEditDTO commentEditDTO { get; set; }
    private string Title {get; set;} = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (commentEditDTO is not null){
            return;
        }
        if(Id is not null)
        {

            var comment = await commentClient.GetCommentAsync(Id.Value) ?? throw new Exception("Comment not found");
            commentEditDTO = new CommentEditDTO(){
                Text = comment.CommentText,
            };
            Title = $"Editing comment";  
        }
    }
    

    private async Task OnSubmitAsync()
    {
        ArgumentNullException.ThrowIfNull(commentEditDTO);
        ArgumentNullException.ThrowIfNull(Id);

        await commentClient.UpdateCommentAsync(commentEditDTO, Id.Value);

        NavigationManager.NavigateTo("/");
    }
}

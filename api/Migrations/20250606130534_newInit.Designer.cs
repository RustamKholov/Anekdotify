// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250606130534_newInit")]
    partial class newInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Classification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassificationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassificationId");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JokeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "JokeId" }, "IX_Comments_JokeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("api.Models.CommentRating", b =>
                {
                    b.Property<int>("CommentRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentRateId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<bool>("Rating")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CommentRateId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "CommentId", "UserId" }, "IX_CommentRatings")
                        .IsUnique();

                    b.ToTable("CommentRatings");
                });

            modelBuilder.Entity("api.Models.Joke", b =>
                {
                    b.Property<int>("JokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JokeId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ApprovedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SubbmissionDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SubbmitedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JokeId");

                    b.HasIndex("ClassificationId");

                    b.ToTable("Jokes");
                });

            modelBuilder.Entity("api.Models.JokeLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LikeId"));

                    b.Property<int>("JokeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LikeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LikeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "JokeId", "UserId" }, "UQ_UserJokeLike")
                        .IsUnique();

                    b.ToTable("JokeLikes");
                });

            modelBuilder.Entity("api.Models.JokePart", b =>
                {
                    b.Property<int>("JokePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JokePartId"));

                    b.Property<int?>("AssociatedJokeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JokePartId");

                    b.HasIndex("AssociatedJokeId");

                    b.ToTable("JokeParts");
                });

            modelBuilder.Entity("api.Models.JokeRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<int>("JokeId")
                        .HasColumnType("int");

                    b.Property<bool>("Rating")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RatingId");

                    b.HasIndex("JokeId");

                    b.HasIndex("UserId");

                    b.ToTable("JokeRatings");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastJokeRetrievalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.UserSavedJoke", b =>
                {
                    b.Property<int>("UserSavedJokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSavedJokeId"));

                    b.Property<int>("JokeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserSavedJokeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "JokeId", "UserId" }, "IX_UserSavedJokes")
                        .IsUnique();

                    b.ToTable("UserSavedJokes");
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.HasOne("api.Models.Joke", "Joke")
                        .WithMany("Comments")
                        .HasForeignKey("JokeId")
                        .IsRequired();

                    b.HasOne("api.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.CommentRating", b =>
                {
                    b.HasOne("api.Models.Comment", "Comment")
                        .WithMany("CommentRatings")
                        .HasForeignKey("CommentId")
                        .IsRequired()
                        .HasConstraintName("FK_CommentRatings_Comments");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("CommentRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommentRatings_User");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Joke", b =>
                {
                    b.HasOne("api.Models.Classification", "Classification")
                        .WithMany("Jokes")
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("FK_Jokes_Classification");

                    b.Navigation("Classification");
                });

            modelBuilder.Entity("api.Models.JokeLike", b =>
                {
                    b.HasOne("api.Models.Joke", "Joke")
                        .WithMany("JokeLikes")
                        .HasForeignKey("JokeId")
                        .IsRequired()
                        .HasConstraintName("FK_JokeLikes_Jokes");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("JokeLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_JokeLikes_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.JokePart", b =>
                {
                    b.HasOne("api.Models.Joke", "AssociatedJoke")
                        .WithMany("JokeParts")
                        .HasForeignKey("AssociatedJokeId")
                        .HasConstraintName("FK_JokeParts_Jokes");

                    b.Navigation("AssociatedJoke");
                });

            modelBuilder.Entity("api.Models.JokeRating", b =>
                {
                    b.HasOne("api.Models.Joke", "Joke")
                        .WithMany("JokeRatings")
                        .HasForeignKey("JokeId")
                        .IsRequired()
                        .HasConstraintName("FK_JokeRatings_Jokes");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("JokeRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_JokeRatings_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.UserSavedJoke", b =>
                {
                    b.HasOne("api.Models.Joke", "Joke")
                        .WithMany("UserSavedJokes")
                        .HasForeignKey("JokeId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSavedJokes_Jokes");

                    b.HasOne("api.Models.User", "User")
                        .WithMany("UserSavedJokes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSavedJokes_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Classification", b =>
                {
                    b.Navigation("Jokes");
                });

            modelBuilder.Entity("api.Models.Comment", b =>
                {
                    b.Navigation("CommentRatings");
                });

            modelBuilder.Entity("api.Models.Joke", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("JokeLikes");

                    b.Navigation("JokeParts");

                    b.Navigation("JokeRatings");

                    b.Navigation("UserSavedJokes");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("CommentRatings");

                    b.Navigation("Comments");

                    b.Navigation("JokeLikes");

                    b.Navigation("JokeRatings");

                    b.Navigation("UserSavedJokes");
                });
#pragma warning restore 612, 618
        }
    }
}

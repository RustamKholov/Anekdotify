// <auto-generated />
using System;
using Anekdotify.Database.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Anekdotify.Database.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Anekdotify.Models.Entities.Classification", b =>
                {
                    b.Property<int>("ClassificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClassificationId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ClassificationId");

                    b.ToTable("Classifications");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("JokeId")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentCommentId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommentId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "JokeId" }, "IX_Comments_JokeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.CommentRating", b =>
                {
                    b.Property<int>("CommentRateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CommentRateId"));

                    b.Property<int>("CommentId")
                        .HasColumnType("integer");

                    b.Property<bool>("Rating")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CommentRateId");

                    b.HasIndex("UserId");

                    b.HasIndex("CommentId", "Rating");

                    b.HasIndex(new[] { "CommentId", "UserId" }, "IX_CommentRatings")
                        .IsUnique();

                    b.ToTable("CommentRatings");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Joke", b =>
                {
                    b.Property<int>("JokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JokeId"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ApprovedByUserId")
                        .HasColumnType("text");

                    b.Property<int?>("ClassificationId")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubbmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SubbmitedByUserId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("JokeId");

                    b.HasIndex("ClassificationId");

                    b.HasIndex("SourceId");

                    b.HasIndex(new[] { "SubbmissionDate" }, "IX_Jokes_SubbmissionDate");

                    b.ToTable("Jokes");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.JokeLike", b =>
                {
                    b.Property<int>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LikeId"));

                    b.Property<int>("JokeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LikeDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LikeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "JokeId", "UserId" }, "UQ_UserJokeLike")
                        .IsUnique();

                    b.ToTable("JokeLikes");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.JokePart", b =>
                {
                    b.Property<int>("JokePartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("JokePartId"));

                    b.Property<int?>("AssociatedJokeId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("PartType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("JokePartId");

                    b.HasIndex("AssociatedJokeId");

                    b.ToTable("JokeParts");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.JokeRating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RatingId"));

                    b.Property<int>("JokeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Rating")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RatingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RatingId");

                    b.HasIndex("UserId");

                    b.HasIndex("JokeId", "Rating");

                    b.ToTable("JokeRatings");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.RefreshToken", b =>
                {
                    b.Property<int>("RefreshTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RefreshTokenId"));

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RefreshTokenId");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Source", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SourceId"));

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("SourceId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.SourceFetchedJoke", b =>
                {
                    b.Property<int>("SourceFetchedJokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SourceFetchedJokeId"));

                    b.Property<DateTime>("FetchedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceJokeId")
                        .HasColumnType("integer");

                    b.HasKey("SourceFetchedJokeId");

                    b.HasIndex("SourceId");

                    b.ToTable("SourceFetchedJokes");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("GitHubId")
                        .HasColumnType("text");

                    b.Property<string>("GoogleId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastJokeRetrievalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Provider")
                        .HasColumnType("text");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.UserSavedJoke", b =>
                {
                    b.Property<int>("UserSavedJokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserSavedJokeId"));

                    b.Property<int>("JokeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SavedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserSavedJokeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "JokeId", "UserId" }, "IX_UserSavedJokes")
                        .IsUnique();

                    b.ToTable("UserSavedJokes");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.UserViewedJoke", b =>
                {
                    b.Property<int>("UserViewedJokeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserViewedJokeId"));

                    b.Property<int>("JokeId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ViewedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserViewedJokeId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "JokeId", "UserId" }, "IX_UserViewedJokes")
                        .IsUnique();

                    b.ToTable("UserViewedJokes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "67afbec1-e1d2-47c1-8686-7d65c6fd61a4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "1b9eed1f-55f0-4301-84b6-e7deee6d4277",
                            Name = "Moderator",
                            NormalizedName = "MODERATOR"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "89fb112e-a846-413b-864f-143194fb63db",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Comment", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Joke", "Joke")
                        .WithMany("Comments")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anekdotify.Models.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Comments_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.CommentRating", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Comment", "Comment")
                        .WithMany("CommentRatings")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommentRatings_Comments");

                    b.HasOne("Anekdotify.Models.Entities.User", "User")
                        .WithMany("CommentRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CommentRatings_User");

                    b.Navigation("Comment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Joke", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Classification", "Classification")
                        .WithMany("Jokes")
                        .HasForeignKey("ClassificationId")
                        .HasConstraintName("FK_Jokes_Classification");

                    b.HasOne("Anekdotify.Models.Entities.Source", "Source")
                        .WithMany("Jokes")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Jokes_Source");

                    b.Navigation("Classification");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.JokeLike", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Joke", "Joke")
                        .WithMany("JokeLikes")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JokeLikes_Jokes");

                    b.HasOne("Anekdotify.Models.Entities.User", "User")
                        .WithMany("JokeLikes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_JokeLikes_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.JokePart", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Joke", "AssociatedJoke")
                        .WithMany("JokeParts")
                        .HasForeignKey("AssociatedJokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_JokeParts_Jokes");

                    b.Navigation("AssociatedJoke");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.JokeRating", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Joke", "Joke")
                        .WithMany("JokeRatings")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JokeRatings_Jokes");

                    b.HasOne("Anekdotify.Models.Entities.User", "User")
                        .WithMany("JokeRatings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_JokeRatings_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RefreshTokens_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.SourceFetchedJoke", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Source", "Source")
                        .WithMany("SourceFetchedJokes")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SourceFetchedJokes_Source");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.UserSavedJoke", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Joke", "Joke")
                        .WithMany("UserSavedJokes")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserSavedJokes_Jokes");

                    b.HasOne("Anekdotify.Models.Entities.User", "User")
                        .WithMany("UserSavedJokes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserSavedJokes_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.UserViewedJoke", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.Joke", "Joke")
                        .WithMany("UserViewedJokes")
                        .HasForeignKey("JokeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserViewedJokes_Jokes");

                    b.HasOne("Anekdotify.Models.Entities.User", "User")
                        .WithMany("UserViewedJokes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserViewedJokes_User");

                    b.Navigation("Joke");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Anekdotify.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Anekdotify.Models.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Classification", b =>
                {
                    b.Navigation("Jokes");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Comment", b =>
                {
                    b.Navigation("CommentRatings");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Joke", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("JokeLikes");

                    b.Navigation("JokeParts");

                    b.Navigation("JokeRatings");

                    b.Navigation("UserSavedJokes");

                    b.Navigation("UserViewedJokes");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.Source", b =>
                {
                    b.Navigation("Jokes");

                    b.Navigation("SourceFetchedJokes");
                });

            modelBuilder.Entity("Anekdotify.Models.Entities.User", b =>
                {
                    b.Navigation("CommentRatings");

                    b.Navigation("Comments");

                    b.Navigation("JokeLikes");

                    b.Navigation("JokeRatings");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserSavedJokes");

                    b.Navigation("UserViewedJokes");
                });
#pragma warning restore 612, 618
        }
    }
}
